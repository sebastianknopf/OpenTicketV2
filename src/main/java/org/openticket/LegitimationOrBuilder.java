// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OpenTicket.proto

package org.openticket;

public interface LegitimationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:OpenTicket.Legitimation)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * the system unique legitimation id
   * </pre>
   *
   * <code>uint32 legitimationId = 1;</code>
   */
  int getLegitimationId();

  /**
   * <pre>
   * the timestamp when the legitimation has been ordered
   * </pre>
   *
   * <code>uint32 dateTimeOfOrder = 2;</code>
   */
  int getDateTimeOfOrder();

  /**
   * <pre>
   * earliest validity timestamp of the legitimation
   * </pre>
   *
   * <code>uint32 validFrom = 3;</code>
   */
  int getValidFrom();

  /**
   * <pre>
   * least validity timestamp of the legitimation
   * </pre>
   *
   * <code>uint32 validUntil = 4;</code>
   */
  int getValidUntil();

  /**
   * <pre>
   * user defined option flags with 32 bits
   * </pre>
   *
   * <code>uint32 optionFlags = 5;</code>
   */
  int getOptionFlags();

  /**
   * <pre>
   * product record with fare product information
   * </pre>
   *
   * <code>.OpenTicket.ProductRecord product = 6;</code>
   */
  boolean hasProduct();
  /**
   * <pre>
   * product record with fare product information
   * </pre>
   *
   * <code>.OpenTicket.ProductRecord product = 6;</code>
   */
  ProductRecord getProduct();
  /**
   * <pre>
   * product record with fare product information
   * </pre>
   *
   * <code>.OpenTicket.ProductRecord product = 6;</code>
   */
  ProductRecordOrBuilder getProductOrBuilder();

  /**
   * <pre>
   * passenger record with information about how many people traveling on this legitmation
   * </pre>
   *
   * <code>.OpenTicket.PassengerRecord passenger = 7;</code>
   */
  boolean hasPassenger();
  /**
   * <pre>
   * passenger record with information about how many people traveling on this legitmation
   * </pre>
   *
   * <code>.OpenTicket.PassengerRecord passenger = 7;</code>
   */
  PassengerRecord getPassenger();
  /**
   * <pre>
   * passenger record with information about how many people traveling on this legitmation
   * </pre>
   *
   * <code>.OpenTicket.PassengerRecord passenger = 7;</code>
   */
  PassengerRecordOrBuilder getPassengerOrBuilder();

  /**
   * <code>.OpenTicket.Relation relation = 8;</code>
   */
  boolean hasRelation();
  /**
   * <code>.OpenTicket.Relation relation = 8;</code>
   */
  Relation getRelation();
  /**
   * <code>.OpenTicket.Relation relation = 8;</code>
   */
  RelationOrBuilder getRelationOrBuilder();

  /**
   * <code>.OpenTicket.AreaList areaList = 9;</code>
   */
  boolean hasAreaList();
  /**
   * <code>.OpenTicket.AreaList areaList = 9;</code>
   */
  AreaList getAreaList();
  /**
   * <code>.OpenTicket.AreaList areaList = 9;</code>
   */
  AreaListOrBuilder getAreaListOrBuilder();

  /**
   * <code>.OpenTicket.StopList stopList = 10;</code>
   */
  boolean hasStopList();
  /**
   * <code>.OpenTicket.StopList stopList = 10;</code>
   */
  StopList getStopList();
  /**
   * <code>.OpenTicket.StopList stopList = 10;</code>
   */
  StopListOrBuilder getStopListOrBuilder();

  /**
   * <pre>
   * full price of the ticket including the tax
   * </pre>
   *
   * <code>uint32 price = 11;</code>
   */
  int getPrice();

  /**
   * <pre>
   * the tax amount applied on the full price
   * </pre>
   *
   * <code>uint32 tax = 12;</code>
   */
  int getTax();

  public Legitimation.AreaInfoCase getAreaInfoCase();
}
